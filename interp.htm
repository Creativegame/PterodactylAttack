
<!doctype html>
<html>
<head>
	<meta charset="utf-8">
	<title>Interpolation Experiment</title>
	<style>
		canvas {
			border: 1px solid black;
		}
	</style>
</head>
<body>
<canvas id='canvas'></canvas>
<script>

function cubichermite(m0,p0,p1,m1,x0,x1) {
	return function(x) { // accepted range of (0,1)
		var dx = x1-x0;
		var t = (x-x0) / dx;
		var t2 = t*t;
		var t3 = t2*t;
		return (
			(2*t3 - 3*t2 + 1)*p0 +
			(t3 - 2*t2 + t)*dx*m0 +
			(-2*t3 + 3*t2)*p1 +
			(t3-t2)*dx*m1
		);
	};
}

function getendslope(p0,t0,p1,t1) {
	return (p1-p0) / (t1-t0);
}

function getmidslope(p0,t0,p1,t1,p2,t2) {
	return (
		0.5 * getendslope(p0,t0,p1,t1) +
		0.5 * getendslope(p1,t1,p2,t2)
	);
}

function calcslopes(pts,times) {
	var len = pts.length;
	var slopes=[],s;
	for (i=0;i<len;i++) {
		if (i==0) {
			s = getendslope(pts[i],0,pts[i+1],times[i+1]);
		}
		else if (i==len-1) {
			s = getendslope(pts[i-1],0,pts[i],times[i]);
		}
		else {
			s = getmidslope(pts[i-1],0,pts[i],times[i],pts[i+1],times[i]+times[i+1]);
		}
		slopes[i] = s;
	}
	return slopes;
}

function calcspline(pts,times,slopes) {
	var i,len=pts.length;
	var splinefuncs = [];
	for (i=0; i<len-1; i++) {
		splinefuncs[i] = cubichermite(slopes[i],pts[i],pts[i+1],slopes[i+1], 0,times[i+1]);
	}
	return splinefuncs;
}

function createinterp(pts,times) {
	var i,len = pts.length;

	var totalTime = 0;
	for (i=1;i<len;i++) {
		totalTime += times[i];
	}

	var slopes = calcslopes(pts,times);
	var splinefuncs = calcspline(pts,times,slopes);

	return function(t) {
		if (t<=0) {
			return pts[0];
		}
		else if (t >= totalTime) {
			return pts[len-1];
		}
		else {
			var i;
			for (i=1; i<len; i++) {
				if (t <= times[i]) {
					break;
				}
				else {
					t -= times[i];
				}
			}
			return splinefuncs[i-1](t);
		}
	};
}

window.addEventListener('load',function(){

	var w = 400;
	var h = 300;

	var canvas = document.getElementById('canvas');
	var ctx = canvas.getContext('2d');

	canvas.width = w;
	canvas.height = h;

	var i,len=16;
	var xs = [];
	var ys = [];
	var ts = [];
	var totalTime = 0;
	var minTime = 0.1;
	var maxTime = 4;
	for (i=0; i<len; i++) {
		xs[i] = (w/(len+1))*(i+1);
		ys[i] = Math.random() * h;
		if (i > 0) {
			ts[i] = Math.random()*(maxTime-minTime) + minTime;
			totalTime += ts[i];
		}
		else {
			ts[i] = 0;
		}
	}
	console.log(ts);

	function dot(x,y,r) {
		ctx.beginPath();
		ctx.arc(x, y, r, 0, Math.PI*2);
		ctx.fill();
	}

	ctx.fillStyle = "#000";
	for (i=0; i<len; i++) {
		dot(xs[i],ys[i],3);
	}

	var xinterp = createinterp(xs,ts);
	var yinterp = createinterp(ys,ts);

	var numpts = 1000;
	ctx.strokeStyle = "#F00";
	ctx.beginPath();
	for (i=0; i<=numpts; i++) {
		var t = i/numpts*totalTime;
		var x = xinterp(t);
		var y = yinterp(t);
		if (i > 0) {
			ctx.lineTo(x,y);
		}
		else {
			ctx.moveTo(x,y);
		}
	}
	ctx.stroke();
});

</script>
</body>
</html>
